{"version":3,"sources":["utils/API.js","components/Wrapper/index.js","components/SearchForm/index.js","components/Main/index.js","components/Header/index.js","components/Headings/index.js","components/TableBody/index.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","Wrapper","children","className","SearchForm","props","type","placeholder","onChange","handleInputChange","Main","Header","Headings","TableBody","employees","map","emp","src","picture","medium","alt","name","first","last","phone","email","date","dateArray","split","year","join","formatDate","dob","App","state","event","setState","search","target","value","API","then","res","console","log","data","results","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oWACe,EAED,WACN,OAAOA,IAAMC,IAAI,kDCMVC,MAPf,YAAgC,IAAbC,EAAY,EAAZA,SACf,OACI,yBAAKC,UAAU,WACTD,I,MCeCE,MAlBf,SAAoBC,GAChB,OACI,0BAAMF,UAAU,aACZ,yBAAKA,UAAU,cACX,2BACIG,KAAK,SACLH,UAAU,eACVI,YAAY,kBACZC,SAAUH,EAAMI,uBCCrBC,MARf,WACI,OACI,oCACI,kBAAC,EAAD,Q,MCMGC,MAVf,WACI,OACI,yBAAKR,UAAU,UACX,oDCWGS,MAff,WACI,OACI,+BACI,4BACI,qCACA,0CACA,yCACA,qCACA,qCACA,sCCmBDC,MA5Bf,YAAmC,IAAdC,EAAa,EAAbA,UAWjB,OACI,6BACKA,EAAUC,KAAI,SAAAC,GAAG,OACd,4BACI,gCAAK,yBAAKC,IAAKD,EAAIE,QAAQC,OAAQC,IAAI,mBACvC,4BAAKJ,EAAIK,KAAKC,OACd,4BAAKN,EAAIK,KAAKE,MACd,4BAAKP,EAAIQ,OACT,4BAAKR,EAAIS,OACT,4BAlBhB,SAAoBC,GAChB,IAAMC,EAAYD,EAAKE,MAAM,KACvBC,EAAOF,EAAU,GAKvB,MADsB,CAHRA,EAAU,GACPA,EAAU,GAAGC,MAAM,KACf,GACcC,GAAMC,KAAK,KAY7BC,CAAWf,EAAIgB,IAAIN,aCqB7BO,E,4MA9BbC,MAAQ,CACNpB,UAAW,I,EAUbL,kBAAoB,SAAA0B,GAClB,EAAKC,SAAS,CAAEC,OAAQF,EAAMG,OAAOC,S,kEATlB,IAAD,OAClBC,IACGC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,KAAKC,SACrB,EAAKV,SAAS,CAAEtB,UAAW4B,EAAIG,KAAKC,aAErCC,OAAM,SAAAC,GAAG,OAAIL,QAAQC,IAAII,Q,+BAM5B,OACE,yBAAK7C,UAAU,OAEb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWW,UAAWmC,KAAKf,MAAMpB,kB,GAvBzBoC,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.8245b167.chunk.js","sourcesContent":["import axios from \"axios\";\r\nexport default {\r\n    // Gets all users\r\n    getUsers: function () {\r\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n    }\r\n};","\r\nimport React from \"react\";\r\n\r\nfunction Wrapper({ children }) {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            { children}\r\n        </div>\r\n    );\r\n}\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"../SearchForm/SearchForm.css\"\r\n\r\nfunction SearchForm(props) {\r\n    return (\r\n        <form className=\"searchbox\">\r\n            <div className=\"form-group\">\r\n                <input\r\n                    type=\"search\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Search Employee\"\r\n                    onChange={props.handleInputChange}\r\n                />\r\n                {/* <button onClick={props.handleFormSubmit} className=\"btn btn-primary mt-3\">\r\n                    Search\r\n        </button> */}\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SearchForm;","\r\nimport React from \"react\";\r\nimport SearchForm from \"../SearchForm/index.js\";\r\n\r\nfunction Main() {\r\n    return (\r\n        <>\r\n            <SearchForm />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Main;","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header() {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>Employee Directory</h1>\r\n            {/* not functional yet */}\r\n            {/* <p>Click on each heading to filter or use the search box to narrow your results</p> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Headings() {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th >IMAGE</th>\r\n                <th >FIRST-NAME</th>\r\n                <th >LAST-NAME</th>\r\n                <th >PHONE</th>\r\n                <th >EMAIL</th>\r\n                <th >DOB</th>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nexport default Headings;","import React from \"react\";\r\n\r\nfunction TableBody({ employees }) {\r\n\r\n    function formatDate(date) {\r\n        const dateArray = date.split(\"-\");\r\n        const year = dateArray[0];\r\n        const month = dateArray[1];\r\n        const dayArray = dateArray[2].split(\"T\");\r\n        const day = dayArray[0];\r\n        const formattedDate = [month, day, year].join(\"-\");\r\n        return formattedDate;\r\n    }\r\n    return (\r\n        <div>\r\n            {employees.map(emp => (\r\n                <tr>\r\n                    <td> <img src={emp.picture.medium} alt=\"employeePhoto\"></img></td>\r\n                    <th>{emp.name.first}</th>\r\n                    <th>{emp.name.last}</th>\r\n                    <td>{emp.phone}</td>\r\n                    <td>{emp.email}</td>\r\n                    <td>{formatDate(emp.dob.date)}</td>\r\n                </tr>\r\n            ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TableBody;","\nimport React, { Component } from 'react';\nimport \"./App.css\";\nimport API from \"./utils/API\";\nimport Wrapper from './components/Wrapper';\nimport Main from './components/Main';\nimport Header from './components/Header';\nimport Headings from './components/Headings';\nimport TableBody from './components/TableBody';\n\n\n\nclass App extends Component {\n  state = {\n    employees: [],\n  };\n  componentDidMount() {\n    API.getUsers()\n      .then(res => {\n        console.log(res.data.results)\n        this.setState({ employees: res.data.results })\n      })\n      .catch(err => console.log(err));\n  }\n  handleInputChange = event => {\n    this.setState({ search: event.target.value });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Wrapper>\n          <Header />\n          <Main />\n          <Headings />\n          <TableBody employees={this.state.employees} />\n        </Wrapper>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}